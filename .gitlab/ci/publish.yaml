.publish:
  stage: deploy
  image: python:3.10.2-bullseye

  # Change pip's cache directory to be inside the project directory since we can
  # only cache local items.
  variables:
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/topics/caching/
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  cache:
    paths:
      - .cache/pip
      - venv/
  before_script:
    - python --version  # For debugging
    - pip install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - python setup.py bdist_wheel
    # an alternative approach is to install and run:
    - pip install dist/*
    # run the command here
    - pip install build twine
    - python -m build
  artifacts:
    paths:
      - dist/*.whl

gitlab-publish:
  extends:
    - .publish
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - if:  ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "dev")

test-pypi-publish:
  extends:
    - .publish
  script:
    - TWINE_PASSWORD=${TEST_PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload --repository testpypi dist/*
  rules:
    - if:  $CI_COMMIT_BRANCH == "dev"

pypi-publish:
  extends:
    - .publish
  script:
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*
  rules:
    - if:  $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
