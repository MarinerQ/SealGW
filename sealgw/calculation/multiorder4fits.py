'''
This file is for the support of multi-order coverage (MOC) so that skymap fits file is compressed.

Seal.localize() returns a numpy.array which includes the probability skymap in NESTED order. If we directly save NESTED skymap, the fits file will be huge[1]. In this script we convert between skymaps of NESTED and UNIQ order. The latter uses MOC and could compress the size of fits files.

This file is based on ligo.skymap[2] functions.


References
----------
[1] https://emfollow.docs.ligo.org/userguide/tutorial/multiorder_skymaps.html
[2] https://lscsoft.docs.ligo.org/ligo.skymap

'''

import astropy_healpix as ah
from astropy.coordinates import SkyCoord
from astropy.table import Table
from astropy import units as u
from astropy.utils.misc import NumpyRNGContext
import healpy as hp
import logging
import numpy as np
import ligo.skymap
import ligo.skymap.bayestar


def probskymap2UNIQTable(prob_skymap, copy=True):
    '''
    A wrapper of ligo.skymap.bayestar.derasterize.

    This function convert a skymap np.array in NESTED order (which is default configuration of SealGW) to a astropy.table.Table. The table include UNIQ pixel indices and the probability *density* skymap. Here density means probability per steradian, rather than the "probability", which is probability per pixel.

    Parameters
    --------
    prob_skymap: numpy.array
    Prob skymap array generated by Seal

    copy: bool
    Whether use a copy of prob_skymap. If False, the input prob_skymap may be changed (up to a normalization factor).

    Return
    --------
    astropy.table.Table
    '''

    prob_skymap_table = Table([prob_skymap], names=['PROB'], copy=copy)

    return ligo.skymap.bayestar.derasterize(prob_skymap_table)


def UNIQTable2probskymap(prob_skymap_table):
    '''
    The inverse of probskymap2UNIQTable.

    Return
    --------
    numpy.array
    '''
    probden_skymap_table = Table(
        ligo.skymap.moc.rasterize(prob_skymap_table),
        meta=prob_skymap_table.meta,
        copy=False,
    )

    # probden_skymap_table.rename_column('PROBDENSITY', 'PROB')
    # probden_skymap_table['PROB'] *= 4 * np.pi / len(probden_skymap_table)
    # probden_skymap_table['PROB'].unit = u.pixel ** -1
    # return probden_skymap_table

    prob_skymap = np.array(probden_skymap_table['PROBDENSITY'].tolist())
    return prob_skymap / sum(prob_skymap)
