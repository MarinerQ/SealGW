import bilby
import numpy as np 
import time
import sys
from multiprocessing import Pool
import multiprocessing
from functools import partial
from bilby.gw import conversion
import json

import sealgw
import sealgw.simulation as sealsim
from sealgw import seal
import spiir 

import functools
import click
from pathlib import Path
from typing import Optional, Union, Sequence

def ifos2detnamelist(ifostr):
    det_name_list = []
    for name in ifostr:
        det_name_list.append(name+'1')
    return det_name_list


@click.command()
@click.argument('ifostr')
@click.argument('psdpath')
@click.argument('output-dir')
@click.argument('label')
@click.option('--low-snr-cutoff', default = 9, prompt='Lower SNR cutoff: ')
@click.option('--high-snr-cutoff', default = 35, prompt='Higher SNR cutoff: ')
@click.option('--nsample', default=30000, prompt='Number of samples: ')
@click.option('--ncpu', default = 1, prompt='ncpu: ',
              help='Number of CPUs for simulation.')
def main(
    ifostr: str,
    psdpath: str,
    output_dir: str,
    label: str,
    low_snr_cutoff: float,
    high_snr_cutoff: float,
    nsample: int,
    ncpu: int
):
    det_name_list = ifos2detnamelist(ifostr)
    source_types = ["BNS", "BBH", "NSBH"]
    seallist = []
    
    for source_type in source_types:
        print("\nTraining {} seal model...".format(source_type))
        seal2train = seal.Seal()

        # fitting
        fitting_samples = seal2train.fitting_mu_sigma_snr_relation(Nsample=nsample, det_name_list=det_name_list, source_type=source_type, ncpu=ncpu,use_bilby_psd = False, custom_psd_path = psdpath, low_snr_cutoff=low_snr_cutoff,high_snr_cutoff=high_snr_cutoff)

        # make fitting plots
        snr_steps = np.arange(low_snr_cutoff, high_snr_cutoff ,2)
        a,b,c,d,mu_list,sigma_list = sealsim.prior_fitting.fitting_abcd(fitting_samples, snr_steps,source_type)
        linear_fitting_plot_filename = '{}/linear_fitting_{}_{}.png'.format(output_dir, source_type, label)
        sealsim.prior_fitting.linear_fitting_plot(snr_steps, mu_list, sigma_list, a, b, c, d, linear_fitting_plot_filename)
        bimodal_fitting_plot_filename = '{}/bimodal_fitting_{}_{}.png'.format(output_dir, source_type, label)
        sealsim.prior_fitting.bimodal_fitting_plot(fitting_samples, a, b, c, d,
                                          [10,15,20,25], [15,20,25,30], save_filename=bimodal_fitting_plot_filename)
        
        seal2train.description = "Config file for {} {}".format(source_type, label)
        seallist.append(seal2train)

    # save
    config_filename = '{}/config_{}.json'.format(output_dir, label)
    sealsim.prior_fitting.save_configs(source_types, label, seallist, config_filename)

if __name__ == '__main__':
    main()